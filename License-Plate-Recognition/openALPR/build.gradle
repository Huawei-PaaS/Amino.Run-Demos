apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.SandroMachado'

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.2"

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 27
        versionCode 1
        versionName "1.0.1"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/terryzhuo/DCAP" }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.huawei.paas:sapphire-core:1.0.0'
    compile 'com.google.code.gson:gson:2.5'
}

subprojects {
    apply plugin: 'java-library'

    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/terryzhuo/DCAP" }
    }

    dependencies {
        compile 'com.huawei.paas:sapphire-core:1.0.0'
        compile 'com.google.code.gson:gson:2.5'
        compile 'com.google.android:android:4.0.1.2'
        compile files("$project.parent.buildDir/intermediates/classes/debug/")
    }

    // Task for Stub generation
    task genStubs(type: JavaExec) {
        def folder = new File("$projectDir.parent/subprojects")
        if(!folder.exists()){
            folder.mkdir();
        }
        main = "amino.run.compiler.StubGenerator"
        classpath = sourceSets.main.runtimeClasspath
        def pkgName = 'com.openalpr.jni'
        def src = "$projectDir.parent/build/intermediates/classes/debug/com/openalpr/jni"
        def dst = "$projectDir.parent/src/main/java/com/openalpr/jni/stubs/"
        args src, pkgName, dst
        outputs.dir dst
    }

    // Task for Stub compilation
    task compileStubsDebug(type: JavaCompile) {
        source = files("$projectDir.parent/src/main/java")
        destinationDir = file("$project.parent.buildDir/intermediates/classes/debug/")
        classpath = sourceSets.main.runtimeClasspath
        options.incremental = true
      }

    // Task for Stub compilation
    task compileStubsRelease(type: JavaCompile) {
        source = files("$projectDir.parent/src/main/java")
        destinationDir = file("$project.parent.buildDir/intermediates/classes/release/")
        classpath = sourceSets.main.runtimeClasspath
        options.incremental = true
    }

    task runoms(type: JavaExec) {
        def projectOpenALPR = project(":openALPR").getProperties().getAt("buildDir")
        classpath = sourceSets.main.runtimeClasspath + files("$projectOpenALPR/intermediates/classes/debug/")
        main = 'amino.run.oms.OMSServerImpl'
        args project.property('omsIpFlag'), project.property('omsIp'), project.property('omsPortFlag'), project.property('omsPort')
    }

    task runks(type: JavaExec) {
        def projectOpenALPR = project(":openALPR").getProperties().getAt("buildDir")
        classpath = sourceSets.main.runtimeClasspath + files("$projectOpenALPR/intermediates/classes/debug/")
        main = 'amino.run.kernel.server.KernelServerImpl'
        args project.property('kernelServerIpFlag'), project.property('kernelServerIp'), project.property('kernelServerPortFlag'), project.property('kernelServerPort'),
                project.property('omsIpFlag'), project.property('omsIp'), project.property('omsPortFlag'), project.property('omsPort'), project.property('labelsFlag'),
                project.property('regionFlag')+project.property('regionValue')
    }

    compileStubsDebug.dependsOn genStubs
    compileStubsRelease.dependsOn compileStubsDebug
}

build.finalizedBy(subprojects.compileStubsRelease)

clean {
    delete subprojects.genStubs.outputs.files
}
