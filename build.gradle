buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        /**
         * Be careful at upgrading to higher version of gradle (e.g., > 3.0):
         * Compilation may work but application will have error when executed due to AAPT2 exception.
         * Disabling AAPT2 will hide an issue with AAPT2 and may cause to stop unit tests to work.
         * Please update only after either the issue is fixed on Android side or fix the bug in the project for AAPT2.
         * https://issuetracker.google.com/issues/38454212
         * https://github.com/requery/requery/issues/467
         */
        classpath 'com.android.tools.build:gradle:3.3.1'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.7'
        classpath 'io.fabric8:kubernetes-client:4.3.0'
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import io.fabric8.kubernetes.client.Config
import io.fabric8.kubernetes.client.ConfigBuilder
import io.fabric8.kubernetes.api.model.ContainerBuilder
import io.fabric8.kubernetes.api.model.ContainerPortBuilder
import io.fabric8.kubernetes.api.model.apps.Deployment
import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder
import io.fabric8.kubernetes.client.DefaultKubernetesClient
import io.fabric8.kubernetes.api.model.IntOrString
import io.fabric8.kubernetes.client.KubernetesClient
import io.fabric8.kubernetes.api.model.Service
import io.fabric8.kubernetes.api.model.ServiceBuilder

import static java.util.Collections.singletonMap

plugins {
    id "de.qaware.cloud.deployer" version "0.9.2"
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        google()
        maven { url "https://dl.bintray.com/terryzhuo/Amino" }
    }
}

subprojects {
    if (getPath().contains(':subprojects')) {
        apply plugin: 'java-library'
        apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
        apply plugin: "de.qaware.cloud.deployer"

        dependencies {
            implementation 'com.amino-os.run:amino-run-core:1.0.0.RC6'
            implementation 'io.fabric8:kubernetes-client:4.3.0'
            /**
             * In android build tools version 3.3.1, the .class files are placed under "build/intermediates/javac/debug/compileDebugJavaWithJavac/classes"
             * using which stub files for the Amino microService is generated.
             * Additionally including the below implementation, makes these .class files accessible at the subprojects level where the task for generating
             * stubs is defined.
             * In future as and when the android build tools version is updated, the below classpath may need to be updated accordingly.
             */
            implementation files("$project.parent.buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes/")
        }

        task ensureFolder {
            doLast {
                mkdir "$projectDir.parent/subprojects"
            }
        }
        compileJava.finalizedBy(ensureFolder)

        docker {
            registryCredentials {
                url = project.property('url')
                username = project.property('repo.username')
                password = project.property('repo.password')
            }
        }

        task fatJar(type: Jar) {
            dependsOn jar
            baseName = project.parent.name
            from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
            with jar
        }
        build.finalizedBy(fatJar)

        task copyScripts(type: Copy){
            mkdir "$projectDir/scripts/"
            from "${projectDir}/../../k8s-deployment/common/"
            into "$projectDir/scripts/"
        }

        task dockerfile(type: Dockerfile) {
            dependsOn copyScripts
            dependsOn fatJar
            destFile = project.file('./Dockerfile')
            from 'alpine:3.7'
            label(['maintainer': 'huawei@huawei.com'])
            runCommand  'apk --update add openjdk8-jre bind-tools'
            // add this statement for respective Application
            //copyFile './build/libs/${ProjectName}.jar', '/root/amino/jars/'
            copyFile './scripts/*', '/root/amino/'
        }

        task buildDockerImage(type: DockerBuildImage) {
            dependsOn dockerfile
            url = 'unix:///var/run/docker.sock'
            inputDir = file("$projectDir")
        }

        task pushImage(type: DockerPushImage) {
            dependsOn buildDockerImage
        }

        KubernetesClient client

        def ensureKubernetesClient = {
            if (client == null) {
                Config config = new ConfigBuilder().withMasterUrl(project.property('baseUrl')).build()
                client = new DefaultKubernetesClient(config)
            }
        }

        ext.createOMSDeployment = { appName, rmiPort, svcPort ->
            ensureKubernetesClient()
            Deployment deployment1 = new DeploymentBuilder()
                    .withNewMetadata()
                        .withName("oms-deployment-${appName}")
                    .endMetadata()
                    .withNewSpec()
                        .withReplicas(1)
                        .withNewSelector()
                            .addToMatchLabels("app", "oms-${appName}")
                        .endSelector()
                        .withNewTemplate()
                            .withNewMetadata()
                                .addToLabels("app", "oms-${appName}")
                            .endMetadata()
                            .withNewSpec()
                                .addToContainers(new ContainerBuilder()
                                                    .withName("oms")
                                                    .withImage(project.property('repo.username') + "/${appName}:latest")
                                                    .withImagePullPolicy("Always")
                                                    .withPorts(Arrays.asList(new ContainerPortBuilder()
                                                                                .withContainerPort(rmiPort)
                                                                                .build(),
                                                                            new ContainerPortBuilder()
                                                                                    .withContainerPort(svcPort)
                                                                                    .build()))
                                                    .addToCommand("/root/amino/start-oms.sh")
                                                    .addToArgs("${rmiPort}", "${svcPort}")
                                                    .addNewEnv()
                                                        .withName("MY_NODE_NAME")
                                                        .withNewValueFrom()
                                                            .withNewFieldRef()
                                                                .withNewFieldPath("spec.nodeName")
                                                            .endFieldRef()
                                                        .endValueFrom()
                                                    .endEnv()
                                                .build())
                            .endSpec()
                        .endTemplate()
                    .endSpec().build()
            client.apps().deployments().inNamespace("default")
                    .withName("oms-deployment").create(deployment1)
        }

        ext.createService = { svcName, rmiPort, svcPort, selector ->
            ensureKubernetesClient()
            Service svc = new ServiceBuilder()
                    .withNewMetadata()
                        .withName("${svcName}")
                    .endMetadata()
                    .withNewSpec()
                        .withType("NodePort")
                        .addToPorts(0, new io.fabric8.kubernetes.api.model.ServicePortBuilder()
                            .withName("${rmiPort}")
                            .withPort(rmiPort)
                            .withProtocol("TCP")
                            .withNodePort(rmiPort)
                            .withNewTargetPort(rmiPort)
                        .build())
                        .addToPorts(1, new io.fabric8.kubernetes.api.model.ServicePortBuilder()
                            .withName("${svcPort}")
                            .withPort(svcPort)
                            .withProtocol("TCP")
                            .withNodePort(svcPort)
                            .withNewTargetPort(svcPort)
                        .build())
                        .withSelector(singletonMap("app".toString(), "${selector}".toString()))
                    .endSpec().build()
            client.services().inNamespace("default").create(svc)
        }

        ext.createKernelServerDeployment = { instance, appName, omsPort, svcPort, rmiPort ->
            ensureKubernetesClient()
            Deployment deployment1 = new DeploymentBuilder()
                    .withNewMetadata()
                        .withName("kernelserver-deployment-${appName}-${instance}")
                    .endMetadata()
                    .withNewSpec()
                        .withReplicas(1)
                        .withNewSelector()
                            .addToMatchLabels("app", "kernelserver-${appName}-${instance}")
                        .endSelector()
                        .withNewTemplate()
                            .withNewMetadata()
                                .addToLabels("app", "kernelserver-${appName}-${instance}")
                            .endMetadata()
                            .withNewSpec()
                                .addToContainers(new ContainerBuilder()
                                                    .withName("kernelserver")
                                                    .withImage(project.property('repo.username') + "/${appName}:latest")
                                                    .withImagePullPolicy("Always")
                                                    .withPorts(Arrays.asList(new ContainerPortBuilder()
                                                                                .withContainerPort(rmiPort)
                                                                                .build(),
                                                                            new ContainerPortBuilder()
                                                                                .withContainerPort(svcPort)
                                                                                .build()))
                                                    .addToCommand("/root/amino/start-kernelserver.sh")
                                                    .addToArgs("oms-svc-${appName}", "${omsPort}", "${svcPort}", "${rmiPort}")
                                                    .addNewEnv()
                                                        .withName("MY_NODE_NAME")
                                                        .withNewValueFrom()
                                                            .withNewFieldRef()
                                                                .withNewFieldPath("spec.nodeName")
                                                            .endFieldRef()
                                                        .endValueFrom()
                                                    .endEnv()
                                                .build())
                            .endSpec()
                        .endTemplate()
                    .endSpec().build()
            client.apps().deployments().inNamespace("default")
                    .withName("kernelserver-deployment").create(deployment1)
        }

        task deployOms {
            // details specific to this task can be found in app level build.gradle
        }

        task deployKernelServer {
            // details specific to this task can be found in app level build.gradle
        }

        // Task for Stub generation
        task genStubs(type: JavaExec) {
            classpath = sourceSets.main.runtimeClasspath
            mustRunAfter compileJava
            main = "amino.run.compiler.StubGenerator"
        }

        // Task for Stub compilation
        task compileStubs(type: JavaCompile) {
            dependsOn genStubs
            source = genStubs.outputs
            classpath = sourceSets.main.compileClasspath
            destinationDir = sourceSets.main.output.classesDir
            options.incremental = true
            outputs.dir destinationDir
        }
        jar.dependsOn compileStubs

        def common = {
            classpath = sourceSets.main.runtimeClasspath
            args project.property('omsIpFlag'), project.property('omsIp'), project.property('omsPortFlag'), project.property('omsPort')
        }

        // Run OMS
        task runoms(type: JavaExec) {
            configure common
            main = 'amino.run.oms.OMSServerImpl'
        }

        // Run a kernel server
        task runks(type: JavaExec) {
            configure common
            main = 'amino.run.kernel.server.KernelServerImpl'
            args project.property('kernelServerIpFlag'), project.property('kernelServer1Ip'), project.property('kernelServerPortFlag'), project.property('kernelServer1Port')
        }

        // Run a second kernel server
        task runks2(type: JavaExec) {
            configure common
            main = 'amino.run.kernel.server.KernelServerImpl'
            args project.property('kernelServerIpFlag'), project.property('kernelServer2Ip'), project.property('kernelServerPortFlag'), project.property('kernelServer2Port')
        }

        clean {
            delete genStubs.outputs.files
            delete copyScripts.outputs.files
            delete buildDockerImage.outputs.files
        }
    }
}
