buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        /**
         * Be careful at upgrading to higher version of gradle (e.g., > 3.0):
         * Compilation may work but application will have error when executed due to AAPT2 exception.
         * Disabling AAPT2 will hide an issue with AAPT2 and may cause to stop unit tests to work.
         * Please update only after either the issue is fixed on Android side or fix the bug in the project for AAPT2.
         * https://issuetracker.google.com/issues/38454212
         * https://github.com/requery/requery/issues/467
         */
        classpath 'com.android.tools.build:gradle:3.3.1'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.7'
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id "de.qaware.cloud.deployer" version "0.9.2"
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        google()
        maven { url "https://dl.bintray.com/terryzhuo/Amino" }
    }
}

subprojects {
    if (getPath().contains(':subprojects')) {
        apply plugin: 'java-library'
        apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
        apply plugin: "de.qaware.cloud.deployer"

        dependencies {
            implementation 'com.amino-os.run:amino-run-core:1.0.0.RC6'
            /**
             * In android build tools version 3.3.1, the .class files are placed under "build/intermediates/javac/debug/compileDebugJavaWithJavac/classes"
             * using which stub files for the Amino microService is generated.
             * Additionally including the below implementation, makes these .class files accessible at the subprojects level where the task for generating
             * stubs is defined.
             * In future as and when the android build tools version is updated, the below classpath may need to be updated accordingly.
             */
            implementation files("$project.parent.buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes/")
        }

        task prepareDirs {
            doLast {
                mkdir "$projectDir.parent/subprojects"
            }
        }

        tasks.each {
            if (it != prepareDirs && it != clean) {
                it.dependsOn prepareDirs
            }
        }

        docker {
            registryCredentials {
                url = project.property('url')
                username = project.property('repo.username')
                password = project.property('repo.password')
            }
        }

        task fatJar(type: Jar) {
            dependsOn jar
            baseName = project.parent.name
            from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
            with jar
        }
        build.finalizedBy(fatJar)

        task copyScripts(type: Copy){
            mkdir "$projectDir/scripts/"
            from "${projectDir}/../../k8s-deployment/common/"
            into "$projectDir/scripts/"
        }

        task dockerfile(type: Dockerfile) {
            dependsOn copyScripts
            dependsOn fatJar
            destFile = project.file('./Dockerfile')
            from 'alpine:3.7'
            label(['maintainer': 'huawei@huawei.com'])
            runCommand  'apk --update add openjdk8-jre bind-tools'
            // add this statement for respective Application
            //copyFile './build/libs/${ProjectName}.jar', '/root/amino/jars/'
            copyFile './scripts/*', '/root/amino/'
        }

        task buildDockerImage(type: DockerBuildImage) {
            dependsOn dockerfile
            url = 'unix:///var/run/docker.sock'
            inputDir = file("$projectDir")
        }

        task pushImage(type: DockerPushImage) {
            dependsOn buildDockerImage
        }

        task createOMSDeployment (type: Copy) {
            from "${projectDir}/../../k8s-deployment/"
            into "$projectDir"
            include 'oms.template.yml'
            rename { file -> 'oms.yml' }
        }

        task createKernelServerDeployment (type: Copy) {
            from "${projectDir}/../../k8s-deployment/"
            into "$projectDir"
            include 'kernelserver.template.yml'
            rename { file -> 'kernelserver.yml' }
        }

        deployer {
            kubernetes {
                id = project.property('omsId')
                baseUrl = project.property('baseUrl')
                namespace = project.property('namespace')
                strategy = project.property('strategy')
                auth {
                    username = project.property('k8s.username')
                    password = project.property('k8s.password')
                }
                ssl {
                    trustAll = true
                }
                files = [file("oms.yml")]
            }
        }

        deployer {
            kubernetes {
                id = project.property('kernelServerId')
                baseUrl = project.property('baseUrl')
                namespace = project.property('namespace')
                strategy = project.property('strategy')
                auth {
                    username = project.property('k8s.username')
                    password = project.property('k8s.password')
                }
                ssl {
                    trustAll = true
                }
                files = [file("kernelserver.yml")]
            }
        }

        task deployOms(type: Exec){
            dependsOn pushImage
            dependsOn createOMSDeployment
            commandLine "${projectDir}/../../gradlew", 'deploy', "--environmentId=oms"
        }

        task deployKernelServer(type: Exec){
            dependsOn deployOms
            dependsOn createKernelServerDeployment
            commandLine "${projectDir}/../../gradlew", 'deploy', "--environmentId=kernelserver"
        }

        // Task for Stub generation
        task genStubs(type: JavaExec) {
            classpath = sourceSets.main.runtimeClasspath
            mustRunAfter compileJava
            main = "amino.run.compiler.StubGenerator"
        }

        // Task for Stub compilation
        task compileStubs(type: JavaCompile) {
            dependsOn genStubs
            source = genStubs.outputs
            classpath = sourceSets.main.compileClasspath
            destinationDir = sourceSets.main.output.classesDir
            options.incremental = true
            outputs.dir destinationDir
        }
        jar.dependsOn compileStubs

        def common = {
            classpath = sourceSets.main.runtimeClasspath
            args project.property('omsIpFlag'), project.property('omsIp'), project.property('omsPortFlag'), project.property('omsPort')
        }

        // Run OMS
        task runoms(type: JavaExec) {
            configure common
            main = 'amino.run.oms.OMSServerImpl'
        }

        // Run a kernel server
        task runks(type: JavaExec) {
            configure common
            main = 'amino.run.kernel.server.KernelServerImpl'
            args project.property('kernelServerIpFlag'), project.property('kernelServer1Ip'), project.property('kernelServerPortFlag'), project.property('kernelServer1Port')
        }

        // Run a second kernel server
        task runks2(type: JavaExec) {
            configure common
            main = 'amino.run.kernel.server.KernelServerImpl'
            args project.property('kernelServerIpFlag'), project.property('kernelServer2Ip'), project.property('kernelServerPortFlag'), project.property('kernelServer2Port')
        }
        
        clean {
            delete genStubs.outputs.files
            delete copyScripts.outputs.files
            delete buildDockerImage.outputs.files
            delete createOMSDeployment.outputs.files
            delete createKernelServerDeployment.outputs.files
        }
    }
}
