apply plugin: 'com.android.application'
android {
    compileSdkVersion = 28
    buildToolsVersion = '28.0.3'

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    defaultConfig {
        applicationId "com.example.hankstodo"
        versionCode 1
        versionName "1.0"
        minSdkVersion 26
        targetSdkVersion 28
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    dexOptions {
        preDexLibraries = false
        additionalParameters = ["--core-library"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.amino-os.run:amino-run-core:1.0.0.RC6'
}

subprojects {
    genStubs {
        def pkgName = 'amino.run.appexamples.hankstodo.app'
        def src = "$projectDir.parent/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/amino/run/appexamples/hankstodo/app/"
        def dst = "$projectDir.parent/src/main/java/amino/run/appexamples/hankstodo/app/stubs/"
        args src, pkgName, dst
        outputs.dir dst
    }

    dockerfile {
        copyFile './build/libs/hanksTodo.jar', '/root/amino/jars/'
    }

    buildDockerImage {
        tag =  "$docker.registryCredentials.username/hankstodo:latest"
    }

    pushImage {
        imageName = "$docker.registryCredentials.username/hankstodo"
        tag = 'latest'
    }

    def omsRmiPort = Integer.parseInt(project.property('omsrmiport'))

    deployOms << {
        def omsSvcPort = Integer.parseInt(project.property('omssvcport'))
        createOMSDeployment(project.property('appname'), omsRmiPort, omsSvcPort)
        createService(project.property('omssvcname'), omsRmiPort, omsSvcPort, project.property('omsselector'))
    }

    deployKernelServer << {
        def ksRmiPort = Integer.parseInt(project.property('kernelserverrmiport')) + Integer.parseInt(ksNum)
        def ksSvcPort = Integer.parseInt(project.property('kernelserversvcport')) + Integer.parseInt(ksNum)
        createKernelServerDeployment(project.property('ksNum'), project.property('appname'), omsRmiPort, ksSvcPort, ksRmiPort)
        createService(project.property('kernelserversvcname') + "-${ksNum}", ksRmiPort, ksSvcPort, project.property('kernelserverselector')+ "-${ksNum}")
    }

    fatJar {
        manifest {
            attributes 'Implementation-Title': 'HanksToDo fat jar',
                    'Implementation-Version': '1.0',
                    'Main-Class': 'amino.run.appexamples.hankstodo.device.TodoActivity'
        }
    }
}

