buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        /**
         * Be careful at upgrading to higher version of gradle (e.g., > 3.0):
         * Compilation may work but application will have error when executed due to AAPT2 exception.
         * Disabling AAPT2 will hide an issue with AAPT2 and may cause to stop unit tests to work.
         * Please update only after either the issue is fixed on Android side or fix the bug in the project for AAPT2.
         * https://issuetracker.google.com/issues/38454212
         * https://github.com/requery/requery/issues/467
         */
        classpath 'com.android.tools.build:gradle:3.3.1'
    }
}

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

android {
    compileSdkVersion = 28
    buildToolsVersion = "28.0.3"

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    defaultConfig {
        applicationId "com.example.chess"
        versionCode 1
        versionName "1.0"
        minSdkVersion 26
        targetSdkVersion 28
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    dexOptions {
        preDexLibraries = false
        additionalParameters = ["--core-library"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    jcenter()
    google()
    maven { url  "https://dl.bintray.com/terryzhuo/Amino" }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.amino-os.run:amino-run-core:1.0.0.RC6'
}

subprojects {
    apply plugin: 'java-library'

    repositories {
        jcenter()
        google()
        maven { url  "https://dl.bintray.com/terryzhuo/Amino" }
    }

    dependencies {
        implementation 'com.amino-os.run:amino-run-core:1.0.0.RC6'
    }

    task fatJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'Gradle Chessjar',
                    'Implementation-Version': '1.0',
                    'Main-Class': 'kobi.chess.MainActivity'
        }
        baseName = project.parent.name
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }
    build.finalizedBy(fatJar)

    task copyClasses(type: Copy) {
        from "$projectDir.parent/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/"
        into 'build/classes/java/main/'
    }

    // Task for Stub generation
    task genChessStubs(type: JavaExec) {
        main = "amino.run.compiler.StubGenerator"
        classpath = sourceSets.main.runtimeClasspath
        def pkgName = 'chessmanager'
        def src = "$projectDir.parent/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/chessmanager/"
        def dst = "$projectDir.parent/src/main/java/chessmanager/stubs/"
        args src, pkgName, dst
    }

    // Task for Stub generation
    task genEngineStubs(type: JavaExec){
        main = "amino.run.compiler.StubGenerator"
        classpath = sourceSets.main.runtimeClasspath
        def pkgName = 'engine'
        def src = "$projectDir.parent/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/engine/"
        def dst = "$projectDir.parent/src/main/java/engine/stubs/"
        args src, pkgName, dst
    }

    // Task for Stub compilation
    task compileChessStubs(type: JavaCompile) {
        source = sourceSets.main.java.srcDirs
        classpath = sourceSets.main.compileClasspath
        destinationDir = sourceSets.main.output.classesDir
        options.incremental = true
    }

    genChessStubs.mustRunAfter compileJava
    genChessStubs.dependsOn copyClasses
    compileChessStubs.dependsOn genChessStubs
    genEngineStubs.mustRunAfter compileJava
    genEngineStubs.dependsOn copyClasses
    compileChessStubs.dependsOn genEngineStubs
    fatJar.dependsOn compileChessStubs

    task runoms(type: JavaExec) {
        dependsOn fatJar
        classpath = sourceSets.main.runtimeClasspath
        main = 'amino.run.oms.OMSServerImpl'
        args project.property('omsIpFlag'), project.property('omsIp'), project.property('omsPortFlag'), project.property('omsPort')
    }

    task runks(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'amino.run.kernel.server.KernelServerImpl'
        args project.property('kernelServerIpFlag'), project.property('kernelServer1Ip'), project.property('kernelServerPortFlag'), project.property('kernelServer1Port'),
                project.property('omsIpFlag'), project.property('omsIp'), project.property('omsPortFlag'), project.property('omsPort')
    }

    task runks2 (type: JavaExec){
     classpath = sourceSets.main.runtimeClasspath
     main = 'amino.run.kernel.server.KernelServerImpl'
     args project.property('kernelServerIpFlag'), project.property('kernelServer2Ip'), project.property('kernelServerPortFlag'), project.property('kernelServer2Port'),
                project.property('omsIpFlag'), project.property('omsIp'), project.property('omsPortFlag'), project.property('omsPort')
    }
}

