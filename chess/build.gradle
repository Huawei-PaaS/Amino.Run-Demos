apply plugin: 'com.android.application'
android {
    compileSdkVersion = 28
    buildToolsVersion = '28.0.3'

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    defaultConfig {
        applicationId "com.example.chess"
        versionCode 1
        versionName "1.0"
        minSdkVersion 26
        targetSdkVersion 28
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    dexOptions {
        preDexLibraries = false
        additionalParameters = ["--core-library"]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.amino-os.run:amino-run-core:1.0.0.RC6'
}

subprojects {
    task genEngineStubs(type: JavaExec) {
        main = "amino.run.compiler.StubGenerator"
        classpath = sourceSets.main.runtimeClasspath
        def pkgName = 'engine'
        def src = "$projectDir.parent/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/engine/"
        def dst = "$projectDir.parent/src/main/java/engine/stubs/"
        args src, pkgName, dst
        outputs.dir dst
    }

    task compileGenEngineStubs(type: JavaCompile) {
        dependsOn genEngineStubs
        source = genEngineStubs.outputs
        classpath = sourceSets.main.compileClasspath
        destinationDir = sourceSets.main.output.classesDir
        options.incremental = true
        outputs.dir destinationDir
    }

    genStubs {
        dependsOn compileGenEngineStubs
        def pkgName = 'chessmanager'
        def src = "$projectDir.parent/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/chessmanager/"
        def dst = "$projectDir.parent/src/main/java/chessmanager/stubs/"
        args src, pkgName, dst
        outputs.dir dst
    }

    dockerfile {
        copyFile './build/libs/chess.jar', '/root/amino/jars/'
    }

    buildDockerImage {
        tag =  "$docker.registryCredentials.username/chess:latest"
    }

    pushImage {
        imageName = "$docker.registryCredentials.username/chess"
        tag = 'latest'
    }

    createOMSDeployment {
        expand(image: "$docker.registryCredentials.username/chess:latest",
                svcport: project.property('omssvcport'),
                rmiport: project.property('omsrmiport'),
                appname: project.property('appname'))
    }

    createKernelServerDeployment {
        expand(image: "$docker.registryCredentials.username/chess:latest",
                omssvcport: project.property('omssvcport'),
                svcport: project.property('kernelserversvcport'),
                rmiport: project.property('kernelserverrmiport'),
                svcport2: project.property('kernelserver2svcport'),
                rmiport2: project.property('kernelserver2rmiport'),
                appname: project.property('appname'))
    }

    fatJar {
        manifest {
            attributes 'Implementation-Title': 'Chess fat jar',
                    'Implementation-Version': '1.0',
                    'Main-Class': 'kobi.chess.MainActivity'
        }
    }
}

clean {
    delete subprojects.genEngineStubs.outputs.files
}
